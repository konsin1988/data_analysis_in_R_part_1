library(ggplot2)
df <- read.csv('train.csv')
str(df)
df <- read.csv('train.csv', sep=';')
str(df)
# Влияние read, write, and gender на то,
# получит человек красный диплом или нет
ggplot(df, aes(read, math, col=gender))+
geom_point()+
facet_grid(.~honor)
# Влияние read, write, and gender на то,
# получит человек красный диплом или нет
ggplot(df, aes(read, math, col=gender))+
geom_point()+
facet_grid(.~hon)
fit <- glm(hon ~ read + math + gender, df, family='binomial')
fit <- glm(hon ~ read + math + gender, df, family='binomial')
df$hon <- factor(df$hon, labels = c('No', 'Yes'))
fit <- glm(hon ~ read + math + gender, df, family='binomial')
summary(fit)
# Влияние read, write, and gender на то,
# получит человек красный диплом или нет
ggplot(df, aes(read, math, col=gender))+
geom_point()+
facet_grid(.~hon)
summary(fit)
fit$coefficients
exp(fit$coefficients)
# Fitted values in natural logarifm
predict(object = fit)
# Fitted values in probability values
predict(object = fit, type='response')
# Probabilities to df
df$prob <- predict(object = fit, type='response')
str(df)
# ----------------TASKS------------------------
fit_cars <- glm(am ~ disp + vs + mpg, mtcars, method = 'binomial')
# ----------------TASKS------------------------
fit_cars <- glm(am ~ disp + vs + mpg, mtcars, family = 'binomial')
summary(fit_cars)$coef
summary(fit_cars)
fit_cars$coefficients
str(mtcars)
df <- read.csv('train.csv', sep=';')
str(df)
fit <- glm(hon ~ read + math + gender, df, family='binomial')
df$hon <- factor(df$hon, labels = c('No', 'Yes'))
# Влияние read, write, and gender на то,
# получит человек красный диплом или нет
ggplot(df, aes(read, math, col=gender))+
geom_point()+
facet_grid(.~hon)
fit <- glm(hon ~ read + math + gender, df, family='binomial')
summary(fit)
fit$coefficients
# ToothGrowth
df_tooth <- ToothGrowth
str(df_tooth)
ggplot(df_tooth, aes(supp, len, colour = dose))+
geom_boxplot()
ggplot(df_tooth, aes(supp, len, colour = as.factor(dose)))+
geom_boxplot()
ggplot(df_tooth, aes(supp, len, fill = as.factor(dose)))+
geom_boxplot()
# ROC curve (ROC кривая)
library(ROCR)
install.packages('ROCR')
# ROC curve (ROC кривая)
library(ROCR)
df
# Probabilities to df
df$prob <- predict(object = fit, type='response')
pred_fit <- prediction(df$prob, df$hon)
perf_fit <- performance(pred_fit, 'tpr', 'fpr')
plot(perf_fit, colorize=T, print.cutoffs.at = seq(0,1, by=0.1))
# auc - area under curve, площадь под кривой
auc <- performance(pred_fit, 'auc')
str(auc)
# Specifies and Sensitivity, специфичность и чувствительность
# Специфичность - насколько часто мы ошибаемся
# Чувсвителоьность - насколько часто мы угадываем ответ
perf_spec <- performance(pred_fit, x.measure = 'cutoff', measure = 'spec')
plot(perf_spec, col='red')
plot(perf_spec, col='red', lwd=1.3)
plot(perf_spec, col='red', lwd=1.5)
plot(perf_spec, col='red', lwd=2)
perf_sens <- performance(pred_fit, x.measure = 'cutoff', measure = 'sens')
plot(add=T, perf_sens, col='green', lwd=2)
library(ggplot2)
# ROC curve (ROC кривая)
# Оценка качества логистической модели
library(ROCR)
df
str(auc)
# Specifies and Sensitivity, специфичность и чувствительность
# Специфичность - насколько часто мы ошибаемся
# Чувсвителоьность - насколько часто мы угадываем ответ
perf_spec <- performance(pred_fit, x.measure = 'cutoff', measure = 'spec')
plot(perf_spec, col='red', lwd=2)
perf_sens <- performance(pred_fit, x.measure = 'cutoff', measure = 'sens')
plot(add=T, perf_sens, col='green', lwd=2)
perf_acc <- performance(pred_fit, x.measure = 'cutoff', measure = 'acc')
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.6, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty'n', cex=1, lwd = 2)
legend(x = 0.6, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty='n', cex=1, lwd = 2)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty='n', cex=1, lwd = 2)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty='n')
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
col=c('red', 'green', 'blue'), bty='n')
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'))
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'))
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n')
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n')
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', title.adj = 0.5)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', title.adj = 0.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', title.adj = 1)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 0.5)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 0.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 0.2)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 0.2)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 1)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', pch = 1)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.3, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
legend(x = 0.4, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.4, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
legend(x = 0.2, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.2, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', y.intersp = 0.8)
legend(x = 0.2, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', lwd=2, y.intersp = 0.8)
plot(perf_spec, col='red', lwd=2)
plot(add=T, perf_sens, col='green', lwd=2)
plot(add=T, perf_acc, col='blue', lwd = 2.5)
legend(x = 0.2, y = 0.4, c('spec', 'sens', 'accur'),
lty=1, col=c('red', 'green', 'blue'), bty = 'n', lwd=2,
y.intersp = 0.8)
abline(v = 0.225, lwd = 2)
# Create a prediction responde, либо сдал, либо не сдал
str(df)
# Create a prediction responde, либо сдал, либо не сдал
df$pred_resp <- factor(ifelse(df$prob > 0.225, 1, 0), labels=c('No', 'Yes'))
# Create variable показывает, насколько точно мы предсказали исход
df$correct <- ifelse(df$pred_resp == df$hon, 1, 0)
ggplot(df, aes(prob, fill=factor(correct)))+
geom_dotplot()
mean(df$correct)
# Тестируем модель на новых данных
df_test <- read.csv('test.csv', sep=';')
head(df_test)
df_test$hon <- NA
df_test$hon <- predict(fit, newdata = df_test, type='response')
df_test
# --------- Task -------------------------------
df_task <- read.csv('data.csv')
str(df_task)
!is.na(df_task$admit)
df_known <- df_task[!is.na(df_task$admit)]
df_known <- df_task[,!is.na(df_task$admit)]
!is.na(df_task$admit)
library(dplyr)
df_task %>%
select_if(!is.na(df_task$admit))
df_task %>%
select_if(is.na(df_task$admit))
is.na(df_task$admit)
df_task %>%
select_if(df_task$admit == is.na(df_task$admit))
is.na(df_task$admit)
df_task %>%
select_if(is.na(df_task$admit))
df_task %>%
filter(is.na(df_task$admit))
df_task %>%
filter(!is.na(df_task$admit))
df_known <- df_task %>%
filter(!is.na(df_task$admit))
fit <- glm(admit ~ rank*gpa, df_known, family='binomial')
predict(object = fit, type = 'response')
df_unknown <- df_task %>%
filter(is.na(df_task$admit))
predict(fit, newdata = df_unknown, type='response')
predict(fit, newdata = df_unknown, type='response') >= 4
sum(predict(fit, newdata = df_unknown, type='response') >= 4)
sum(predict(fit, newdata = df_unknown, type='response') >= 0.4)
df_tast %>%
filter(is.na(df_task$admit))
df_task %>%
filter(is.na(df_task$admit))
df_task %>%
filter(is.na(df_task$admit)) %>%
mutate(admit, ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task
ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0)
df_task %>%
filter(is.na(df_task$admit))
ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0)
df_task %>%
filter(is.na(df_task$admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task
df_task %>%
filter(is.na(df_task$admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
predict(fit, type='response')
df_task
predict(fit, type='response')
df_task %>%
# filter(is.na(df_task$admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task %>%
filter(is.na(df_task$admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task[is.na(df_task$admit)] <- df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit, newdata = df_unknown, type='response') >= 0.4, 1, 0))
df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit,
newdata = df_unknown, type='response') >= 0.4, 1, 0))%>%
rbind(df_task %>% filter(!is.na(admit)))
df_task
df_new <- df_task %>%
filter(is.na(admit)) %>%
mutate(admit = ifelse(predict(fit,
newdata = df_unknown, type='response') >= 0.4, 1, 0))%>%
rbind(df_task %>% filter(!is.na(admit)))
df_new
