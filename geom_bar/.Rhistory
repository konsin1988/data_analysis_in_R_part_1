library(ggplot2)
df <- HairEyeColor
names(df)
names(df)
df <- as.data.frame(HairEyeColor)
names(df)
names(df)
ggplot(df, aes(x = Hair, fill = Eye))+
geom_bar()
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar()
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Blue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
source("~/.active-rstudio-document", echo=TRUE)
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Darkorange', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity', position='fill')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_col(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity', position='dodge')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df[,,'Female'], aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity', position='dodge')+
scale_fill_manual(values=c('Brown', 'Lightblue', 'Darkgrey', 'Darkgreen'))
ggplot(df, aes(x = Hair, y=Freq, fill = Eye))+
geom_bar(stat = 'identity', position='dodge')+
scale_fill_manual(values=c('Brown', 'Blue', 'Darkgrey', 'Darkgreen'))
df <- as.data.frame(HairEyeColor([,,'Female'])
df <- as.data.frame(HairEyeColor([,,'Female'])
df <- as.data.frame(HairEyeColor[,,'Female'])
ls
getwd()
setwd('../test_dir')
list.dir('..')
list.dirs('..')
list.dirs('..', recursive = F)
df <- read.csv('../tables/grants.csv')
head(df)
setwd('../nominative_vars')
df$status
str(df)
df$status <- factor(df$status, labels = c('Not founded', 'Founded'))
t1 <- table(df$status)
t1
binom.test(t1)
t2 <- table(df$status, df$field)
t2
t2 <- table(status = df$status, field = df$field)
(t2 <- table(status = df$status, field = df$field))
prop.table(t2)
prop.table(t2, 1)
prop.table(t2, 2)
t3 <- table(Years = df$years_in_uni, Field = df$field, Status = df$status)
(t3 <- table(Years = df$years_in_uni, Field = df$field, Status = df$status))
prop.table(t3, 2)
barplot(t2)
barplot(t2)
binom.test(t1)
binom.test(t1) # How much theoretical value differ from real data
chisq.test(t1)
chi <- chisq.test(t1)
chi.exp
chi$exp
chi$exp       # expected values
chi$obs       # observed values
# t2 table
chisq.test(t2)
source("~/r_lang/data_analisis_in_R/nominative_vars/grants.R", echo=TRUE)
# Fisher exact test
fisher.test(t2)
# Eyes of women-browns
hyc <- HairEyeColor
# Eyes of women-browns
hyc <- HairEyeColor[,'Brown', 'Women']
HairEyeColor
# Eyes of women-browns
hyc <- HairEyeColor[,'Brown', 'Female']
hyc
chisq.text(hyc)
chisq.test(hyc)
# Eyes of women-browns
hyc <- HairEyeColor['Brown', ,'Female']
hyc
chisq.test(hyc)
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
diamonds
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
ggplot(diamonds)
library(ggplot2)
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
ggplot(diamonds)
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
di_df <- ggplot(diamonds)
head(di_df)
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
di_df <- as.data.frame(ggplot(diamonds))
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
di_df <- as.data.frame(diamonds)
di_df
str(di_df)
t_cut_color <- table(di_df$cut, di_df$color)
t_cut_color
t_cut_color <- table(Cut = di_df$cut, Color = di_df$color)
t_cut_color
main_stat <- chisq.test(t_cut_color)
main_stat
main_stat$statistic
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df$factor_price <-
mean(di_df$price)
mean(di_df$price)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df$factor_price <-
di_df$price >= mean(di_df$price)
di_df$price >= mean(di_df$price)
di_df$price >= mean(di_df$price)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df$price
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df$price >= mean(di_df$price)
library(dplyr)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>%
set(factor_price = 1)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price_factor)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price_factor = 0)
di_df
# hypothesis about the relationship between
# the quality of a diamond’s
# cut (cut) and its color (color)
di_df <- as.data.frame(diamonds)
di_df
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price_factor = 0)
di_df
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price == mean(price))
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price >= mean(.$price))
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов.
di_df %>% select(price) >= mean(di_df$price)
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов
di_df$price_factor <- di_df$price >= mean(di_df$price)
di_df$price_factor
tail(di_df$price_factor)
any(di_df$price_factor)
factor(as.numeric(di_df$price_factor), labels = c('gt_mean', 'ls_mean'))
factor(as.numeric(di_df$price_factor), labels = c('ls_mean', 'gt_mean'))
di_df$price_factor <- factor(as.numeric(di_df$price_factor), labels = c('ls_mean', 'gt_mean'))
(factor(as.numeric(di_df$carat >= mean(di_df$carat)), labels = c('ls_mean', 'gt_mean')))
di_df$carat_factor <- (factor(as.numeric(di_df$carat >= mean(di_df$carat)), labels = c('ls_mean', 'gt_mean')))
t2 <- table(di_df$price_factor, di_df$carat_factor)
t2
chisq.test(t2)
chisq.test(t2)$statistic
# При помощи критерия Хи - квадрат проверьте гипотезу
# о взаимосвязи цены (price) и каратов (carat) бриллиантов
di_df$price_factor <- factor(as.numeric(di_df$price >= mean(di_df$price)), labels = c('ls_mean', 'gt_mean'))
di_df$carat_factor <- factor(as.numeric(di_df$carat >= mean(di_df$carat)), labels = c('ls_mean', 'gt_mean'))
t2 <- table(di_df$price_factor, di_df$carat_factor)
chisq.test(t2)$statistic
# При помощи точного критерия Фишера проверьте гипотезу
# о взаимосвязи типа коробки передач (am) и
# типа двигателя (vs) в данных mtcars
df <- mtcars
str(df)
df$am <- factor(df$am, labels = c('Auto', 'Manual'))
df$vs <- factor(df$vs, labels = c('V', 'S'))
fisher.test(table(df$am, df$vs))
f_test <- fisher.test(table(df$am, df$vs))
f_test$p.value
fisher_test <- fisher.test(table(df$am, df$vs))$p.value
fisher_test
