geom_smooth()
ggplot(df)+
aes(hp, mpg)+
geom_point(size=4)+
geom_smooth(method='lm')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=3)+
geom_smooth(method='lm')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=2)+
geom_smooth(method='lm')
ggplot(df)+
aes(hp, mpg)+
# geom_point(size=2)+
geom_smooth(method='lm')
ggplot(df)+
aes(hp, mpg)+
# geom_point(size=2)+
geom_smooth()
ggplot(df)+
aes(hp, mpg)+
# geom_point(size=2)+
geom_smooth(method='glm')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=2)+
geom_smooth(method='glm')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=2)+
geom_smooth(method='gam')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=2)+
geom_smooth(method='loess')
ggplot(df)+
aes(hp, mpg)+
geom_point(size=2)+
geom_smooth(se = F)
fitted_values_mpg <- data.frame(mpg = df$mpg, fitted_mpg = fit$fitted.values)
fitted_values_mpg
fitted_values_mpg <- data.frame(mpg = df$mpg, fitted_mpg = round(fit$fitted.values, 2))
fitted_values_mpg
fitted_values_mpg <- data.frame(mpg = df$mpg,
fitted_mpg = round(fit$fitted.values, 1))
fitted_values_mpg
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp$mpg <- predict(fit, hew_hp$hp)
new_hp$mpg <- predict(fit, new_hp$hp)
new_hp$mpg <- predict(fit, new_hp)
new_hp
new_hp$mpg <- round(predict(fit, new_hp),1)
new_hp
# Линейная регрессия с номинативной переменной
# в качестве предиктора (cyl - колво цилиндров)
df
df$cyl <- factor(df$cyl, labels = c('four', 'six', 'eight'))
fit <- lm(mpg ~ cyl, df)
summary(fit)
aggregate(mpg ~ cyl, df, mean)
ggplot(df)+
aes(cyl, mpg)+
geom_point()
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=20))
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=10))
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=14))
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=12))
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_smooth()
ggplot(df)+
aes(cyl, mpg)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))
# Model hs ~ cyl
fit <- lm(hp ~ cyl, df)
summary(fit)
summary(fit)
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))
aggregate(hp ~ cyl, df, mean)
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl), linestyle='dashed')
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl, linestyle='dashed'))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl), linestyle='dashed')
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl, linetype = 'dashed'))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl, linetype = 'dotted'))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean))+
aes(yintercept = hp, col=cyl, linetype = 'dotted'))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean))+
aes(yintercept = hp, col=cyl, linetype = 'dotted')
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean)+
aes(yintercept = hp, col=cyl, linetype = 'dotted'))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean)+
aes(yintercept = hp, col=cyl))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean)+
aes(yintercept = hp, col=cyl))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl))
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl), linetype = 'dotted')
ggplot(df)+
aes(cyl, hp)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl), linetype = 'dashed')
ggplot(df)+
aes(cyl, hp, col=cyl)+
geom_point()+
theme(axis.text = element_text(size=12),
axis.title = element_text(size = 12, face='bold'))+
geom_hline(data = aggregate(hp ~ cyl, df, mean),
aes(yintercept = hp, col=cyl), linetype = 'dashed')
library(dplyr)
df <- read.table('dataset_11508_12.txt')
df.head()
head(df)
fit <- lm(df$V1 ~ df$V2, df)
summary(fit)
# -------------------------------------
# Воспользуемся уже знакомыми данными diamonds
# из библиотеки ggplot2. Только для бриллиантов
# класса Ideal (переменная cut) c числом карат
# равным 0.46 (переменная carat) постройте линейную
# регрессию, где в качестве зависимой переменной
# выступает price, в качестве предиктора - переменная  depth.
df <- diamonds
# -------------------------------------
# Воспользуемся уже знакомыми данными diamonds
# из библиотеки ggplot2. Только для бриллиантов
# класса Ideal (переменная cut) c числом карат
# равным 0.46 (переменная carat) постройте линейную
# регрессию, где в качестве зависимой переменной
# выступает price, в качестве предиктора - переменная  depth.
library(ggplot2)
df <- diamonds
df$cut
df$cut == 'Ideal'
df %>%
filter(cut == 'Ideal')
df %>%
filter(cut == 'Ideal') %>%
select(price, depth)
df_filtered <- df %>%
filter(cut == 'Ideal') %>%
select(price, depth)
fit <- lm(df_filtered$price ~ df_filtered$depth, df_filtered)
df_filtered <- df %>%
filter(cut == 'Ideal', carat == 0.46) %>%
select(price, depth)
fit <- lm(df_filtered$price ~ df_filtered$depth, df_filtered)
fit
df_filtered
fit <- lm(price ~ depth, df_filtered)
fit
fit$coefficients
library(dplyr)
# df_filtered <- df %>%
#   filter(cut == 'Ideal', carat == 0.46) %>%
#   select(price, depth)
fit <- lm(price ~ depth, data = df, subset = (cut == 'Ideal', carat == 0.46))
# df_filtered <- df %>%
#   filter(cut == 'Ideal', carat == 0.46) %>%
#   select(price, depth)
fit <- lm(price ~ depth, data = df, subset = (cut == 'Ideal'& carat == 0.46))
fit$coefficients
df_filtered <- df %>%
filter(cut == 'Ideal', carat == 0.46) %>%
select(price, depth)
fit_dplyr <- lm(price ~ depth, data = df_filtered)
fit <- lm(price ~ depth, data = df, subset = (cut == 'Ideal'& carat == 0.46))
fit_dplyr$coefficients
fit$coefficients
fit <- lm(price ~ depth, df, subset = (cut == 'Ideal'& carat == 0.46))
fit$coefficients
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
head(df)
cor.test(df, method = 'pearson')
cor.test(df[,1], df[,2], method = 'pearson')
cor.test(df[,1], df[,2], method = 'pearson')$estimates
cor.test(df[,1], df[,2], method = 'pearson')$estimate
cor.test(df[,1], df[,2], method = 'pearson')$p.value
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
cbind(df, fit$fitted.values)
}
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
cbind(df, fit$fitted.values)
}
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
data.frame(names(df)[1] = df[,1],
names(df)[1]
data.frame({names(df)[1]} = df[,1],
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
data.frame(df[,1], df[,2], fit = fit$fitted.values)
}
fit$fitted.values
length(fit$fitted.values)
length(df[,1])
length(df[,2])
is.na(df[,1])
any(is.na(df[,1]))
any(is.na(df[,2]))
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
data.frame(df[,1], df[,2], fit = fit$fitted.values)
}
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
data.frame(df[,1], df[,2])
}
length(fit$fitted.values)
fit$fitted.values
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1], df[,2], df)
data.frame(df[,1], df[,2], fit$fitted.values)
}
fit <- lm(df[,1], df[,2])
fit <- lm(df[,1] ~df[,2], df)
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
data.frame(df[,1], df[,2], fit$fitted.values)
}
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
data.frame(df[,1], df[,2], fit$fitted.values)
} else {
"There is no sense in prediction"
}
df = iris[,1:2]
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
data.frame(df[,1], df[,2], fit$fitted.values)
} else {
"There is no sense in prediction"
}
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
data.frame(df[,1], df[,2], fit$fitted.values)
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
regr.calc(df)
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
data.frame(df[,1], df[,2], fit = fit$fitted.values)
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
df = iris[,1:2]
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
regr.calc(df)
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
cbind(df, fit = fit$fitted.values)
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
df$fit = fit$fitted.values
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
regr.calc(df)
df$fit <- fit$fitted.values
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
df$fit <- fit$fitted.values
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
# (p - уровень значимости для коэффициента
# корреляции Пирсона меньше 0.05), то функция
# строит регрессионную модель, где первая переменная -
# зависимая, вторая - независимая. Затем создает
# в dataframe новую переменную с назанием fit,
# где сохраняет предсказанные моделью значения
# зависимой переменной. В результате функция должна
# возвращать исходный dataframe с добавленной новой переменной fit.
# Если две переменные значимо не коррелируют,
# то функция возвращает строчку "There is no sense in prediction"
df <- iris[,c(1, 4)]
regr.calc(df)
regr.calc <- function(df){
if(cor.test(df[,1], df[,2], method = 'pearson')$p.value < 0.05) {
fit <- lm(df[,1] ~ df[,2], df)
df$fit <- fit$fitted.values
return(df)
} else {
"There is no sense in prediction"
}
}
regr.calc(df)
#----------------------------------------------------
# Постройте scatterplot по данным iris,
# сохранив его в переменную my_plot :
#   Ось X - переменная Sepal.Width
# Ось Y -  переменная Petal.Width
# Цвет точек - переменная Species
# Также добавьте линейное сглаживание
# для каждой группы наблюдений по переменной Species.
ggplot(iris)+
aes(iris$Sepal.Width, iris$Petal.Width)+
geom_point()
#----------------------------------------------------
# Постройте scatterplot по данным iris,
# сохранив его в переменную my_plot :
#   Ось X - переменная Sepal.Width
# Ось Y -  переменная Petal.Width
# Цвет точек - переменная Species
# Также добавьте линейное сглаживание
# для каждой группы наблюдений по переменной Species.
ggplot(iris)+
aes(iris$Sepal.Width, iris$Petal.Width, col=iris$Species)+
geom_point()
#----------------------------------------------------
# Постройте scatterplot по данным iris,
# сохранив его в переменную my_plot :
#   Ось X - переменная Sepal.Width
# Ось Y -  переменная Petal.Width
# Цвет точек - переменная Species
# Также добавьте линейное сглаживание
# для каждой группы наблюдений по переменной Species.
ggplot(iris)+
aes(iris$Sepal.Width, iris$Petal.Width, col=iris$Species)+
geom_point()+
geom_smooth()
#----------------------------------------------------
# Постройте scatterplot по данным iris,
# сохранив его в переменную my_plot :
#   Ось X - переменная Sepal.Width
# Ось Y -  переменная Petal.Width
# Цвет точек - переменная Species
# Также добавьте линейное сглаживание
# для каждой группы наблюдений по переменной Species.
ggplot(iris)+
aes(iris$Sepal.Width, iris$Petal.Width, col=iris$Species)+
geom_point()+
geom_smooth(method = 'lm')
write.csv(iris, file='iris.csv')
