# Normality of residual distribution
ggplot(df, aes(x = df$lm1.resid))+
geom_histogram(y = after_stat(density))+
geom_density()
# Normality of residual distribution
ggplot(df, aes(x = df$lm1.resid))+
geom_histogram(y = after_stat(density))+
geom_density()
# Normality of residual distribution
ggplot(df, aes(x = lm1.resid))+
geom_histogram(y = after_stat(density))+
geom_density()
# Normality of residual distribution
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)))+
geom_density()
# Normality of residual distribution
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)))+
geom_density(color='red', fill='red', alpha=0.4)
library(ggplot2)
# Normality of residual distribution
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)))+
geom_density(color='red', fill='red', alpha=0.4)
# Normality of residual distribution
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)))+
geom_density(color='red', fill='red', alpha=0.4)+
stat_function(fun=dnorm,
args=fitdistr(df$lm1.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
# Normality of residual distribution
library(ggplot2)
library(MASS)
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)))+
geom_density(color='red', fill='red', alpha=0.4)+
stat_function(fun=dnorm,
args=fitdistr(df$lm1.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 2)+
geom_density(color='red', fill='red', alpha=0.4)+
stat_function(fun=dnorm,
args=fitdistr(df$lm1.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 2)+
geom_density(color='red', fill='red', alpha=0.4, adjust = 0.9)+
stat_function(fun=dnorm,
args=fitdistr(df$lm1.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
ggplot(df, aes(x = lm1.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 2)+
geom_density(color='red', fill='red', alpha=0.4, adjust = 0.7)+
stat_function(fun=dnorm,
args=fitdistr(df$lm1.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
qqnorm(df$lm1.resid)
qqline(df$lm1.resid)
shapiro.test(df$lm1.resid)
# Normality of residuals distribution model 2
ggplot(df, aes(x = lm2.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 2)+
geom_density(color='red', fill='red', alpha=0.4, adjust = 0.7)+
stat_function(fun=dnorm,
args=fitdistr(df$lm2.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
# Normality of residuals distribution model 2
ggplot(df, aes(x = lm2.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 2)+
geom_density(color='red', fill='red', alpha=0.4, adjust = 0.9)+
stat_function(fun=dnorm,
args=fitdistr(df$lm2.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
# Normality of residuals distribution model 2
ggplot(df, aes(x = lm2.resid))+
geom_histogram(aes(y = after_stat(density)), binwidth = 1.5)+
geom_density(color='red', fill='red', alpha=0.4, adjust = 0.9)+
stat_function(fun=dnorm,
args=fitdistr(df$lm2.resid,"normal")$estimate,
color='black',
lwd=1.3,
alpha=0.8)
qqnorm(df$lm2.resid)
qqline(df$lm2.resid)
shapiro.test(df$lm2.resid)
shapiro.test(fit)
fit <- lm(mpg ~ disp, mtcars)
shapiro.test(fit)
sum_homo$`p-value`
fit
summary(fit)
fit$fitted.values
hist(fit$fitted.values)
shapiro.test(hist(fit$fitted.values))
shapiro.test(hist(as.numeric(fit$fitted.values)))
shapiro.test(hist(as.numeric(fit$fitted.values)))
fit <- lm(mpg ~ disp, mtcars)
shapiro.test(hist(as.numeric(fit$fitted.values)))
typeof(fit$residuals)
shapiro.test(hist(fit$residuals))
shapiro.test(df$lm1.resid)
shapiro.test(fit$residuals)
shapiro.test(fit$residuals)
shapiro.test(fit$residuals)$p.value
shapiro.test(fit$residuals)$p.value < 0.05
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
shapiro.test(fit$residuals)$p.value < 0.05
ggplot(fit, aes(x=residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
library(ggplot2)
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
shapiro.test(fit$residuals)$p.value < 0.05
ggplot(fit, aes(x=residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
ggplot(fit, aes(x=residuals))+
geom_histogram(binwidth = 0.5)
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
shapiro.test(fit$residuals)$p.value < 0.05
ggplot(fit, aes(x=residuals))+
geom_histogram(binwidth = 0.5)
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
shapiro.test(fit$residuals)$p.value < 0.05
ggplot(fit, aes(x=residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
# shapiro.test(fit$residuals)$p.value < 0.05
ggplot(fit, aes(x=residuals))+
geom_histogram()
}
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
# shapiro.test(fit$residuals)$p.value < 0.05
ggplot(x, aes(x=residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
my_plot
fit <- lm(mpg ~ disp, mtcars)
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
ggplot(x, aes(x = residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
ggplot(x)+
aes(x = residuals)+
geom_histogram()
}
my_plot <- resid.norm(fit)
my_plot
data.frame(fit)
data.frame(fit$residuals)
data.frame(fit$residuals, labels=c('residuals'))
data.frame(residuals = fit$residuals)
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram()
}
my_plot <- resid.norm(fit)
my_plot
fit <- data.frame(residuals=fit$residuals)
ggplot(fit, aes(x=residuals))+
geom_histogram()
ggplot(fit, aes(x=residuals))+
geom_histogram(binwidth = 0.5)
ggplot(fit, aes(x=residuals))+
geom_histogram(binwidth = 0.3)
fit <- lm(mpg ~ disp, mtcars)
fit_df <- data.frame(residuals=fit$residuals)
ggplot(fit_df, aes(x=residuals))+
geom_histogram(color)
fit
summary(fit)
summary(fit)$p.value
summary(fit)
summary(fit)$p-value
summary(fit)$p.value
summary(fit)$p_value
summ <- summary(fit)
shapiro.test(fit$residuals)
shapiro.test(fit$residuals)$p.value
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram(color = ifelse(shapiro.test(x$residuals)$p.value) < 0, 'red', 'green')
}
my_plot <- resid.norm(fit)
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram(color = ifelse(shapiro.test(x$residuals)$p.value < 0, 'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$residuals)$p.value < 0, 'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(fit.residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$residuals)$p.value < 0, 'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(fit.residuals = fit$residuals)
ggplot(x, aes(x = residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$residuals)$p.value < 0, 'red', 'green'))
}
my_plot <- resid.norm(fit)
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(fit.residuals = fit$residuals)
ggplot(x, aes(x = fit.residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$fit.residuals)$p.value < 0, 'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
ggplot(x, aes(x = fit.residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$fit.residuals)$p.value < 0.05, 'red', 'green'))
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(fit.residuals = fit$residuals)
ggplot(x, aes(x = fit.residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$fit.residuals)$p.value < 0.05, 'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
fit <- lm(mpg ~ wt, mtcars)
my_plot <- resid.norm(fit)
my_plot
# ------------------------------------------
# Task function resid.norm
resid.norm <- function(x){
library(ggplot2)
x <- data.frame(fit.residuals = x$residuals)
ggplot(x, aes(x = fit.residuals))+
geom_histogram(fill = ifelse(shapiro.test(x$fit.residuals)$p.value < 0.05,
'red', 'green'))
}
my_plot <- resid.norm(fit)
my_plot
fit <- lm(mpg ~ disp, mtcars)
my_plot <- resid.norm(fit)
my_plot
combn(swiss, 2)
combn(names(swiss), 2)
as.data.frame(combn(names(swiss), 2))
as.data.frame(combn(names(swiss), 2))$V1
cor(swiss[,c(1,2)])
cor(swiss[,c(1)], swiss[,2])
cor(swiss[,1], swiss[,2])
as.data.frame(combn(names(swiss), 2))$V1
swiss$as.data.frame(combn(names(swiss), 2))$V1
swiss[c(as.data.frame(combn(names(swiss), 2))$V1)]
cor(swiss[c(as.data.frame(combn(names(swiss), 2))$V1)])
cor(swiss[c(as.data.frame(combn(names(swiss), 2))$V1)])[1]
cor(swiss[c(as.data.frame(combn(names(swiss), 2))$V1)])[2]
cor(swiss[c(as.data.frame(combn(names(swiss), 2))$V1)])[3]
cor(swiss[c(as.data.frame(combn(names(swiss), 2))$V1)])[2]
pairs(swiss)
summary(pairs(swiss))
as.data.frame(combn(names(swiss)
as.data.frame(combn(names(swiss), 2)
df_names <- as.data.frame(combn(names(swiss), 2))
df_names <- as.data.frame(combn(names(swiss), 2)
df_names <- as.data.frame(combn(names(swiss), 2))
df_names <- as.data.frame(combn(names(swiss), 2))
df_names
sapply(df_names, function(x) paste(x[1], x[2]))
list(sapply(df_names, function(x) paste(x[1], x[2])))
names(df_names) <- sapply(df_names, function(x) paste(x[1], x[2]))
df_names
sapply(df_names, function(x) swiss[x])
sapply(df_names, function(x) cor(swiss[x]))
sapply(df_names, function(x) cor(swiss[x])[2])
rbind(df_names, sapply(df_names, function(x) cor(swiss[x])[2]))
df_result <- rbind(df_names, sapply(df_names, function(x) cor(swiss[x])[2]))
df_result[which.max(df_result[3,])]
df_result[which.max(abs(df_result[3,]))]
df_result[which.max(abs(df_result[3,]))]
df_result[which.max(df_result[3,])]
df_result <- rbind(df_names, sapply(df_names, function(x) abs(cor(swiss[x])[2])))
df_result[which.max(df_result[3,])]
str(iris)
iris[is.numeric(iris)]
iris[,is.numeric(iris)]
library(dplyr)
iris %>%
select_if(is.numeric)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
x
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
combinations
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(x) <- sapply(x, function(x) paste(x[1], x[2]))
combinations
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(x, function(x) paste(x[1], x[2]))
combinations
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
combinations
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result[which.max(df_result[3,])]
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
library(dplyr)
x <- x %>%
select_if(is.numeric)
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result[which.max(df_result[3,])][c(1,2),]
}
high.corr(iris)
high.corr(swiss)
is.numeric(iris)
sapply(iris, function(x) is.numeric(x))
iris[,sapply(iris, function(x) is.numeric(x))]
high.corr <- function(x){
x[,sapply(x, function(x) is.numeric(x))]
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result[which.max(df_result[3,])][c(1,2),]
}
high.corr(iris)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
x <- x[,sapply(x, function(x) is.numeric(x))]
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result[which.max(df_result[3,])][c(1,2),]
}
high.corr(iris)
high.corr(swiss)
test_data <- as.data.frame(list(V1 = c(-1, 1.2, 0.6, 0.6, -0.7, -0.1, 2, 0.4, 0.3, -0.1, 0.9, -1.4, -0.7, 0.4, 1, 0.1, -1.3, 1.4, -0.3, 0.9, 0.7, -1.4, -0.4, 0.7, 1.9), V2 = c(-2.2, 1.8, -0.8, 0.6, -0.4, 1.1, -1.3, 0.1, 0.2, -0.5, -0.3, -0.1, -1.1, 0.2, 1.7, 0.3, 1.7, -0.8, 1.1, 0.8, -0.2, -0.9, -1.7, -0.3, 1.5), V3 = c(-2.2, 1.8, -0.8, 0.6, -0.4, 1.1, -1.3, 0.1, 0.2, -0.5, -0.3, -0.1, -1.1, 0.2, 1.7, 0.3, 1.7, -0.8, 1.1, 0.8, -0.2, -0.9, -1.7, -0.3, 1.5)))
test_data
high.corr(test_data)
test_data <- as.data.frame(list(V1 = c(-0.5, -0.3, 1, 0.6, 0.3), V2 = c(-0.5, 1.2, 0, 1.9, 1.3), V3 = c(0.4, -1.5, 0.8, -0.3, 0.1), V4 = c(-0.9, -0.2, 0.1, -1, 0.9), V5 = c(0.9, -0.7, -0.4, 0.8, -1.2), V6 = c(-0.8, 0.7, 0.1, 0.6, 0.3), V7 = c(0, -0.5, 0.7, 0.2, 0.1), V8 = c(-0.5, -0.8, 0.7, 0.6, 0.1), V9 = c(-0.8, -0.1, 1.4, 1.6, -0.5), V10 = c(-1.6, -0.4, -1, 1.5, 1.2), V11 = c(-0.4, 1.5, -0.8, 0.3, -0.1)))
test_data
high.corr(test_data)
test_data <- as.data.frame(list(V1 = c(1.7, -1.9, 0.3, 0.6, 0.5), V2 = c(-0.6, -0.7, -1.1, -0.9, -0.1), V3 = c(-0.1, 0.2, 0.1, 1.2, -0.5), V4 = c(1, 0.3, 0, 0.6, -2.4), V5 = c(0, 0.1, 0.3, 2, -0.9), V6 = c(-0.7, 0.3, 0.7, -0.3, -1.8), V7 = c(-1.1, 1, -1, -1, -1), V8 = c(0.5, 0.9, 0.7, -0.3, -0.6), V9 = c(-0.3, 1, 0.2, 0.8, -0.3), V10 = c(-0.8, -0.5, 0.2, 0.7, -0.7), V11 = c(-1.7, 1.9, -0.3, -0.6, -0.5)))
high.corr(test_data)
combn(test_data, 2)
combn(names(test_data), 2)
# ---------------------------------------------------------
# Multicollinearity test
high.corr <- function(x){
x <- x[,sapply(x, function(x) is.numeric(x))]
combinations <- as.data.frame(combn(names(x), 2))
names(combinations) <- sapply(combinations, function(x) paste(x[1], x[2]))
df_result <- rbind(combinations, sapply(combinations, function(y) abs(cor(x[y])[2])))
df_result[which.max(df_result[3,])][c(1,2),]
}
high.corr(iris)
typeof(high.corr(iris))
high.corr(swiss)
